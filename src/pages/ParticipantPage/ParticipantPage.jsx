import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import firebaseSurveyManager from '../../utils/firebaseSurveyManager';
import { truncateSurveyDescription } from '../../utils/textUtils';
import TruncatedText from '../../components/TruncatedText/TruncatedText';
import SurveyForm from '../../components/SurveyForm/SurveyForm';
import './ParticipantPage.css';

const ParticipantPage = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [participantName, setParticipantName] = useState('');
  const [currentSurvey, setCurrentSurvey] = useState(null);
  const [showSurveyForm, setShowSurveyForm] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [surveyResponse, setSurveyResponse] = useState(null);
  const [errors, setErrors] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const surveyCode = searchParams.get('code');

  useEffect(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥ –≤ URL, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ä–æ—Å
    if (surveyCode) {
      loadSurvey();
    }
  }, [surveyCode]);

  const loadSurvey = async () => {
    try {
      const survey = await firebaseSurveyManager.getSurveyByCode(surveyCode.toUpperCase());
      if (survey && survey.isActive) {
        setCurrentSurvey(survey);
      }
    } catch (error) {
      console.error('Error loading survey:', error);
    }
  };

  const handleNameSubmit = async (e) => {
    e.preventDefault();
    
    if (!participantName.trim()) {
      setErrors(['–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è']);
      return;
    }

    if (participantName.trim().length < 2) {
      setErrors(['–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞']);
      return;
    }

    setIsLoading(true);
    setErrors([]);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑, —á—Ç–æ –æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
      const survey = await firebaseSurveyManager.getSurveyByCode(surveyCode.toUpperCase());
      
      if (!survey) {
        setErrors(['–û–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω']);
        return;
      }

      if (!survey.isActive) {
        setErrors(['–≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω']);
        return;
      }

      setCurrentSurvey(survey);
      setShowSurveyForm(true);
    } catch (error) {
      setErrors([error.message]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSurveySubmit = (response) => {
    setSurveyResponse(response);
    setShowSurveyForm(false);
    setShowResults(true);
  };

  const handleCloseSurvey = () => {
    setShowSurveyForm(false);
    setCurrentSurvey(null);
  };

  const handleCloseResults = () => {
    setShowResults(false);
    setSurveyResponse(null);
    setCurrentSurvey(null);
    setParticipantName('');
  };

  const handleStartOver = () => {
    setShowResults(false);
    setSurveyResponse(null);
    setCurrentSurvey(null);
    setParticipantName('');
    setErrors([]);
  };

  const handleGoHome = () => {
    navigate('/');
  };

  if (showSurveyForm && currentSurvey) {
    return (
      <SurveyForm
        survey={currentSurvey}
        participantName={participantName}
        onSubmit={handleSurveySubmit}
        onClose={handleCloseSurvey}
      />
    );
  }

  if (showResults && surveyResponse) {
    return (
      <div className="participant-results-overlay">
        <div className="participant-results-modal">
          <button className="results-close" onClick={handleCloseResults}>
            √ó
          </button>
          
          <div className="results-content">
            <div className="results-header">
              <h2>–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
              <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ "<TruncatedText text={currentSurvey.title} maxLength={50} />"</p>
            </div>

            <div className="results-info">
              <div className="result-item">
                <span className="result-label">–£—á–∞—Å—Ç–Ω–∏–∫:</span>
                <span className="result-value">{participantName}</span>
              </div>
              
              <div className="result-item">
                <span className="result-label">–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</span>
                <span className="result-value">
                  {new Date(surveyResponse.submittedAt).toLocaleString('ru-RU')}
                </span>
              </div>

              {surveyResponse.score !== null && (
                <div className="result-item">
                  <span className="result-label">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                  <span className="result-value score">
                    {surveyResponse.score} –±–∞–ª–ª–æ–≤
                  </span>
                </div>
              )}
            </div>

            <div className="results-actions">
              <button 
                className="btn btn-outline"
                onClick={handleGoHome}
              >
                –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
              </button>
              <button 
                className="btn btn-primary"
                onClick={handleStartOver}
              >
                –ü—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π –æ–ø—Ä–æ—Å
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="participant-page">
      <div className="participant-container">
        <div className="participant-header">
          <button className="btn btn-outline back-button" onClick={handleGoHome}>
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
          <div className="participant-header-top">
            <h1>–£—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ</h1>
          </div>
          <p>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—á–∞—Å—Ç–∏—è –≤ –æ–ø—Ä–æ—Å–µ</p>
          {currentSurvey && (
            <div className="survey-info-display">
              <h3><TruncatedText text={currentSurvey.title} maxLength={50} /></h3>
              {truncateSurveyDescription(currentSurvey.description) && <p>{truncateSurveyDescription(currentSurvey.description)}</p>}
              <div className="survey-details">
                <span>–ö–æ–¥: {surveyCode}</span>
                <span>–í–æ–ø—Ä–æ—Å–æ–≤: {currentSurvey.questions.length}</span>
                {currentSurvey.timeLimit > 0 && (
                  <span>–í—Ä–µ–º—è: {currentSurvey.timeLimit} –º–∏–Ω</span>
                )}
              </div>
            </div>
          )}
        </div>

        <div className="participant-form-container">
          <form className="participant-form" onSubmit={handleNameSubmit}>
            {errors.length > 0 && (
              <div className="error-messages">
                {errors.map((error, index) => (
                  <div key={index} className="error-message">{error}</div>
                ))}
              </div>
            )}

            <div className="form-group">
              <label htmlFor="participantName">–í–∞—à–µ –∏–º—è *</label>
              <input
                type="text"
                id="participantName"
                value={participantName}
                onChange={(e) => setParticipantName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                className="form-input"
                maxLength="50"
                autoFocus
              />
              <small className="form-hint">
                –ò–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø—Ä–æ—Å–∞ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)
              </small>
            </div>

            <button 
              type="submit" 
              className="btn btn-primary submit-btn"
              disabled={isLoading}
            >
              {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å'}
            </button>
          </form>
        </div>

        <div className="participant-info-section">
          <div className="info-card">
            <div className="info-icon">üìã</div>
            <h3>–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å</h3>
            <p>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å" –¥–ª—è —É—á–∞—Å—Ç–∏—è</p>
          </div>

          <div className="info-card">
            <div className="info-icon">‚úÖ</div>
            <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>
            <p>–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–∏–µ –æ–ø—Ä–æ—Å—ã</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ParticipantPage; 