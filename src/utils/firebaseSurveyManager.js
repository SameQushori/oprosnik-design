import { db } from '../firebase';
import {
  collection,
  doc,
  getDoc,
  getDocs,
  setDoc,
  addDoc,
  updateDoc,
  deleteDoc,
  query,
  where,
  orderBy
} from 'firebase/firestore';

// –ö–æ–ª–ª–µ–∫—Ü–∏–∏ Firestore
const surveysCol = collection(db, 'surveys');
const responsesCol = collection(db, 'responses');
const adminsCol = collection(db, 'admins');

class FirebaseSurveyManager {
  constructor() {
    this.surveys = [];
    this.responses = [];
    this.firebaseAvailable = true;
    this.checkFirebaseConnection();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Firebase
  async checkFirebaseConnection() {
    try {
      await getDocs(surveysCol);
      this.firebaseAvailable = true;
      console.log('‚úÖ Firebase SurveyManager –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return true;
    } catch (error) {
      console.warn('Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', error.message);
      this.firebaseAvailable = false;
      return false;
    }
  }

  // --- –û–ü–†–û–°–´ ---
  async getAllSurveys() {
    const snapshot = await getDocs(surveysCol);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  }

  async getSurveyById(surveyId) {
    console.log('üîç getSurveyById –≤—ã–∑–≤–∞–Ω —Å surveyId:', surveyId);
    
    if (!this.firebaseAvailable) {
      // Fallback –Ω–∞ localStorage
      const storedSurveys = localStorage.getItem('survey_surveys');
      const surveys = storedSurveys ? JSON.parse(storedSurveys) : [];
      const survey = surveys.find(survey => survey.id === surveyId) || null;
      console.log('üíæ –û–ø—Ä–æ—Å –∏–∑ localStorage:', survey);
      return survey;
    }

    try {
      console.log('üî• –ó–∞–ø—Ä–æ—Å –∫ Firebase –¥–ª—è surveyId:', surveyId);
      const ref = doc(surveysCol, surveyId);
      const snap = await getDoc(ref);
      const survey = snap.exists() ? { id: snap.id, ...snap.data() } : null;
      console.log('üî• –û–ø—Ä–æ—Å –∏–∑ Firebase:', survey);
      return survey;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø–æ ID:', error);
      return null;
    }
  }

  async getSurveyByCode(code) {
    console.log('üîç getSurveyByCode –≤—ã–∑–≤–∞–Ω —Å code:', code);
    
    if (!this.firebaseAvailable) {
      // Fallback –Ω–∞ localStorage
      const storedSurveys = localStorage.getItem('survey_surveys');
      const surveys = storedSurveys ? JSON.parse(storedSurveys) : [];
      const survey = surveys.find(survey => survey.code === code && survey.isActive) || null;
      console.log('üíæ –û–ø—Ä–æ—Å –ø–æ –∫–æ–¥—É –∏–∑ localStorage:', survey);
      return survey;
    }

    try {
      console.log('üî• –ó–∞–ø—Ä–æ—Å –∫ Firebase –¥–ª—è –∫–æ–¥–∞:', code);
      const q = query(surveysCol, where('code', '==', code), where('isActive', '==', true));
      const snapshot = await getDocs(q);
      if (snapshot.empty) {
        console.log('‚ùå –û–ø—Ä–æ—Å —Å –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Firebase');
        return null;
      }
      const docSnap = snapshot.docs[0];
      const survey = { id: docSnap.id, ...docSnap.data() };
      console.log('üî• –û–ø—Ä–æ—Å –ø–æ –∫–æ–¥—É –∏–∑ Firebase:', survey);
      return survey;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø–æ –∫–æ–¥—É:', error);
      return null;
    }
  }

  async createSurvey(surveyData, createdBy) {
    try {
      console.log('üìù createSurvey –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', { surveyData, createdBy });
      
      const newSurvey = {
        code: this.generateSurveyCode(),
        title: surveyData.title,
        description: surveyData.description,
        timeLimit: surveyData.timeLimit || 0,
        questions: surveyData.questions,
        isActive: true,
        createdBy: createdBy,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        participants: 0,
        responses: []
      };

      console.log('üìã –°–æ–∑–¥–∞–≤–∞–µ–º—ã–π –æ–ø—Ä–æ—Å:', newSurvey);

      if (this.firebaseAvailable) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        console.log('üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase...');
        const docRef = await addDoc(surveysCol, newSurvey);
        const createdSurvey = { id: docRef.id, ...newSurvey };
        console.log('‚úÖ –û–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firebase:', createdSurvey);
        return { success: true, survey: createdSurvey };
      } else {
        // Fallback –Ω–∞ localStorage
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage...');
        const surveyWithId = { id: this.generateSurveyId(), ...newSurvey };
        const storedSurveys = localStorage.getItem('survey_surveys');
        let surveys = storedSurveys ? JSON.parse(storedSurveys) : [];
        surveys.push(surveyWithId);
        localStorage.setItem('survey_surveys', JSON.stringify(surveys));
        console.log('‚úÖ –û–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:', surveyWithId);
        return { success: true, survey: surveyWithId };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞:', error);
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: ' + error.message);
    }
  }

  async updateSurvey(surveyId, updateData) {
    try {
      const updatePayload = {
        ...updateData,
        updatedAt: new Date().toISOString()
      };

      if (this.firebaseAvailable) {
        const ref = doc(surveysCol, surveyId);
        await updateDoc(ref, updatePayload);
        return await this.getSurveyById(surveyId);
      } else {
        // Fallback –Ω–∞ localStorage
        const storedSurveys = localStorage.getItem('survey_surveys');
        let surveys = storedSurveys ? JSON.parse(storedSurveys) : [];
        const surveyIndex = surveys.findIndex(s => s.id === surveyId);
        if (surveyIndex !== -1) {
          surveys[surveyIndex] = { ...surveys[surveyIndex], ...updatePayload };
          localStorage.setItem('survey_surveys', JSON.stringify(surveys));
          return surveys[surveyIndex];
        }
        throw new Error('–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞: ' + error.message);
    }
  }

  async deleteSurvey(surveyId) {
    try {
      console.log('üóëÔ∏è deleteSurvey –≤—ã–∑–≤–∞–Ω —Å surveyId:', surveyId);
      
      if (this.firebaseAvailable) {
        console.log('üî• –£–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å –∏–∑ Firebase...');
        
        // –£–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å
        const surveyRef = doc(surveysCol, surveyId);
        await deleteDoc(surveyRef);
        console.log('‚úÖ –û–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –∏–∑ Firebase');
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–ø—Ä–æ—Å...');
        const responsesQuery = query(responsesCol, where('surveyId', '==', surveyId));
        const responsesSnapshot = await getDocs(responsesQuery);
        
        if (!responsesSnapshot.empty) {
          const deletePromises = responsesSnapshot.docs.map(doc => deleteDoc(doc.ref));
          await Promise.all(deletePromises);
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${responsesSnapshot.size} –æ—Ç–≤–µ—Ç–æ–≤`);
        } else {
          console.log('‚ÑπÔ∏è –û—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
      } else {
        console.log('üíæ –£–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å –∏–∑ localStorage...');
        
        // Fallback –Ω–∞ localStorage
        const storedSurveys = localStorage.getItem('survey_surveys');
        let surveys = storedSurveys ? JSON.parse(storedSurveys) : [];
        const initialCount = surveys.length;
        surveys = surveys.filter(survey => survey.id !== surveyId);
        localStorage.setItem('survey_surveys', JSON.stringify(surveys));
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –æ–ø—Ä–æ—Å –∏–∑ localStorage (–±—ã–ª–æ: ${initialCount}, —Å—Ç–∞–ª–æ: ${surveys.length})`);

        // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
        const storedResponses = localStorage.getItem('survey_responses');
        let responses = storedResponses ? JSON.parse(storedResponses) : [];
        const initialResponsesCount = responses.length;
        responses = responses.filter(response => response.surveyId !== surveyId);
        localStorage.setItem('survey_responses', JSON.stringify(responses));
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –∏–∑ localStorage (–±—ã–ª–æ: ${initialResponsesCount}, —Å—Ç–∞–ª–æ: ${responses.length})`);
      }
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞:', error);
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞: ' + error.message);
    }
  }

  // --- –û–¢–í–ï–¢–´ ---
  async getSurveyResponses(surveyId) {
    if (!this.firebaseAvailable) {
      // Fallback –Ω–∞ localStorage
      const storedResponses = localStorage.getItem('survey_responses');
      const responses = storedResponses ? JSON.parse(storedResponses) : [];
      return responses
        .filter(response => response.surveyId === surveyId)
        .sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));
    }

    try {
      const q = query(
        responsesCol, 
        where('surveyId', '==', surveyId),
        orderBy('submittedAt', 'desc')
      );
      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤:', error);
      return [];
    }
  }

  async submitResponse(surveyId, participantName, answers, startedAt = null) {
    try {
      console.log('üì§ submitResponse –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', { surveyId, participantName, answers, startedAt });
      
      const survey = await this.getSurveyById(surveyId);
      console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:', survey);
      
      if (!survey) {
        console.error('‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID:', surveyId);
        throw new Error('–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      if (!survey.isActive) {
        console.error('‚ùå –û–ø—Ä–æ—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω:', survey);
        throw new Error('–û–ø—Ä–æ—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      const requiredQuestions = survey.questions.filter(q => q.required);
      const answeredQuestions = Object.keys(answers);
      
      for (const question of requiredQuestions) {
        if (!answeredQuestions.includes(question.id) || 
            (Array.isArray(answers[question.id]) && answers[question.id].length === 0) ||
            (!Array.isArray(answers[question.id]) && !answers[question.id])) {
          throw new Error(`–í–æ–ø—Ä–æ—Å "${question.text}" –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
        }
      }

      const response = {
        id: this.generateResponseId(),
        surveyId: surveyId,
        participantName: participantName,
        answers: answers,
        submittedAt: new Date().toISOString(),
        startedAt: startedAt || null,
        score: this.calculateScore(survey, answers)
      };

      console.log('üìù –°–æ–∑–¥–∞–≤–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:', response);

      if (this.firebaseAvailable) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ Firebase
        console.log('üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ Firebase...');
        const responseRef = await addDoc(responsesCol, response);
        const savedResponse = { id: responseRef.id, ...response };
        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firebase:', savedResponse);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ä–æ—Å–∞
        const newParticipants = survey.participants + 1;
        console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ä–æ—Å–∞:', { surveyId, newParticipants });
        await updateDoc(doc(surveysCol, surveyId), {
          participants: newParticipants,
          updatedAt: new Date().toISOString()
        });

        return { success: true, response: savedResponse };
      } else {
        // Fallback –Ω–∞ localStorage
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ localStorage...');
        const storedResponses = localStorage.getItem('survey_responses');
        let responses = storedResponses ? JSON.parse(storedResponses) : [];
        responses.push(response);
        localStorage.setItem('survey_responses', JSON.stringify(responses));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ä–æ—Å–∞
        const storedSurveys = localStorage.getItem('survey_surveys');
        let surveys = storedSurveys ? JSON.parse(storedSurveys) : [];
        const surveyIndex = surveys.findIndex(s => s.id === surveyId);
        if (surveyIndex !== -1) {
          surveys[surveyIndex].participants += 1;
          surveys[surveyIndex].updatedAt = new Date().toISOString();
          localStorage.setItem('survey_surveys', JSON.stringify(surveys));
        }

        return { success: true, response: response };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ' + error.message);
    }
  }

  // --- –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´ ---
  async getAllAdmins() {
    const snapshot = await getDocs(adminsCol);
    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  }

  async getAdminByLogin(login) {
    const q = query(adminsCol, where('login', '==', login));
    const snapshot = await getDocs(q);
    if (snapshot.empty) return null;
    const docSnap = snapshot.docs[0];
    return { id: docSnap.id, ...docSnap.data() };
  }

  async createAdmin(adminData) {
    const docRef = await addDoc(adminsCol, adminData);
    return { id: docRef.id, ...adminData };
  }

  async updateAdmin(id, updateData) {
    const ref = doc(adminsCol, id);
    await updateDoc(ref, updateData);
    return this.getAdminById(id);
  }

  async deleteAdmin(id) {
    await deleteDoc(doc(adminsCol, id));
  }

  // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---
  generateSurveyId() {
    return 'survey_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  generateSurveyCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 6; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  generateResponseId() {
    return 'response_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  calculateScore(survey, answers) {
    let totalScore = 0;

    survey.questions.forEach(question => {
      if (question.hasCorrectAnswer && question.correctAnswer) {
        const userAnswer = answers[question.id];
        if (userAnswer) {
          let isCorrect = false;
          if (question.type === 'single_choice') {
            isCorrect = userAnswer === question.correctAnswer;
          } else if (question.type === 'multiple_choice') {
            const userAnswers = Array.isArray(userAnswer) ? userAnswer : [userAnswer];
            const correctAnswers = Array.isArray(question.correctAnswer) ? question.correctAnswer : [question.correctAnswer];
            isCorrect = userAnswers.length === correctAnswers.length && 
                       userAnswers.every(ans => correctAnswers.includes(ans));
          }
          if (isCorrect) {
            totalScore += question.points || 1;
          }
        }
      }
    });
    return totalScore;
  }

  validateSurveyData(surveyData) {
    const errors = [];

    if (!surveyData.title || surveyData.title.trim().length < 3) {
      errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
    }

    if (!surveyData.description || surveyData.description.trim().length < 10) {
      errors.push('–û–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
    }

    if (!surveyData.questions || surveyData.questions.length === 0) {
      errors.push('–û–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å');
    }

    surveyData.questions.forEach((question, index) => {
      if (!question.text || question.text.trim().length < 3) {
        errors.push(`–í–æ–ø—Ä–æ—Å ${index + 1}: —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞`);
      }

      if (question.type === 'single_choice' || question.type === 'multiple_choice') {
        if (!question.options || question.options.length < 2) {
          errors.push(`–í–æ–ø—Ä–æ—Å ${index + 1}: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞`);
        }

        question.options.forEach((option, optIndex) => {
          if (!option.text || option.text.trim().length === 0) {
            errors.push(`–í–æ–ø—Ä–æ—Å ${index + 1}, –≤–∞—Ä–∏–∞–Ω—Ç ${optIndex + 1}: —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º`);
          }
        });
      }
    });

    return errors;
  }

  async getUserSurveys(userId) {
    console.log('üîç getUserSurveys –≤—ã–∑–≤–∞–Ω —Å userId:', userId);
    console.log('üîç Firebase –¥–æ—Å—Ç—É–ø–µ–Ω:', this.firebaseAvailable);
    
    if (!this.firebaseAvailable) {
      // Fallback –Ω–∞ localStorage
      const storedSurveys = localStorage.getItem('survey_surveys');
      const surveys = storedSurveys ? JSON.parse(storedSurveys) : [];
      console.log('üì¶ –í—Å–µ –æ–ø—Ä–æ—Å—ã –≤ localStorage:', surveys);
      
      const userSurveys = surveys
        .filter(survey => survey.createdBy === userId)
        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      
      console.log('üë§ –û–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', userSurveys);
      return userSurveys;
    }

    try {
      console.log('üî• –ó–∞–ø—Ä–æ—Å –∫ Firebase –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      const q = query(
        surveysCol, 
        where('createdBy', '==', userId),
        orderBy('createdAt', 'desc')
      );
      const snapshot = await getDocs(q);
      const surveys = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log('üî• –û–ø—Ä–æ—Å—ã –∏–∑ Firebase:', surveys);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–ø—Ä–æ—Å—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤...');
      const validSurveys = [];
      
      for (const survey of surveys) {
        try {
          const surveyRef = doc(surveysCol, survey.id);
          const surveyDoc = await getDoc(surveyRef);
          
          if (surveyDoc.exists()) {
            validSurveys.push(survey);
            console.log(`‚úÖ –û–ø—Ä–æ—Å ${survey.id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          } else {
            console.log(`‚ùå –û–ø—Ä–æ—Å ${survey.id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ä–æ—Å–∞ ${survey.id}:`, error.message);
        }
      }
      
      console.log(`üìä –í–∞–ª–∏–¥–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: ${validSurveys.length} –∏–∑ ${surveys.length}`);
      return validSurveys;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return [];
    }
  }

  async getSurveyStats(surveyId) {
    try {
      const survey = await this.getSurveyById(surveyId);
      const responses = await this.getSurveyResponses(surveyId);
      
      if (!survey) return null;

      // –°—á–∏—Ç–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
      let maxScore = 0;
      survey.questions.forEach(q => {
        if (q.hasCorrectAnswer && q.correctAnswer) {
          maxScore += q.points || 1;
        }
      });

      const stats = {
        totalParticipants: responses.length,
        averageScore: 0,
        maxScore,
        questionStats: {},
        recentResponses: responses.slice(0, 5)
      };

      if (responses.length > 0) {
        const totalScore = responses.reduce((sum, response) => sum + (response.score || 0), 0);
        stats.averageScore = Math.round((totalScore / responses.length) * 100) / 100;
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
      survey.questions.forEach(question => {
        if (question.type === 'multiple_choice' || question.type === 'single_choice') {
          const questionResponses = responses.map(r => r.answers[question.id]).filter(Boolean);
          const optionCounts = {};
          
          question.options.forEach(option => {
            optionCounts[option.id] = 0;
          });

          questionResponses.forEach(answer => {
            if (Array.isArray(answer)) {
              answer.forEach(optionId => {
                if (optionCounts[optionId] !== undefined) {
                  optionCounts[optionId]++;
                }
              });
            } else if (optionCounts[answer] !== undefined) {
              optionCounts[answer]++;
            }
          });

          stats.questionStats[question.id] = {
            type: question.type,
            text: question.text,
            optionCounts: optionCounts,
            totalResponses: questionResponses.length
          };
        }
      });

      return stats;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  async clearCacheAndReload() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    if (this.firebaseAvailable) {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Firebase
      await this.checkFirebaseConnection();
      console.log('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω, Firebase –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω');
    } else {
      // –û—á–∏—â–∞–µ–º localStorage
      localStorage.removeItem('survey_surveys');
      localStorage.removeItem('survey_responses');
      console.log('‚úÖ localStorage –æ—á–∏—â–µ–Ω');
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
  async forceDeleteSurvey(surveyId) {
    console.log('üí• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:', surveyId);
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å
      await this.deleteSurvey(surveyId);
      
      // –ó–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º –∫—ç—à
      await this.clearCacheAndReload();
      
      console.log('‚úÖ –û–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω –∏ –∫—ç—à –æ—á–∏—â–µ–Ω');
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const firebaseSurveyManager = new FirebaseSurveyManager();

export default firebaseSurveyManager; 