import { db } from '../firebase';
import { collection, addDoc, getDocs } from 'firebase/firestore';
import firebaseSurveyManager from './firebaseSurveyManager';

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase
export const testFirebaseConnection = async () => {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase...');
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ surveys
    const surveysCol = collection(db, 'surveys');
    const snapshot = await getDocs(surveysCol);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: ${snapshot.size}`);
    
    return { success: true, surveysCount: snapshot.size };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase:', error.message);
    
    if (error.message.includes('Missing or insufficient permissions')) {
      console.error('üîß –†–µ—à–µ–Ω–∏–µ: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ Firebase Console');
      console.error('üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –°–º. —Ñ–∞–π–ª FIREBASE_SETUP.md');
    }
    
    return { success: false, error: error.message };
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
export const createTestSurvey = async () => {
  try {
    const testSurveyData = {
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å',
      description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Firebase',
      timeLimit: 0,
      isPublic: false,
      questions: [
        {
          id: 'q1',
          text: '–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?',
          type: 'single_choice',
          required: true,
          hasCorrectAnswer: false,
          correctAnswer: null,
          points: 1,
          options: [
            { id: 'opt1', text: '–ö—Ä–∞—Å–Ω—ã–π' },
            { id: 'opt2', text: '–°–∏–Ω–∏–π' },
            { id: 'opt3', text: '–ó–µ–ª–µ–Ω—ã–π' }
          ]
        }
      ]
    };

    const result = await firebaseSurveyManager.createSurvey(testSurveyData, 'test-admin');
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω:', result.survey);
    return { success: true, survey: result.survey };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞:', error.message);
    return { success: false, error: error.message };
  }
};

// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const testGetUserSurveys = async (userId) => {
  try {
    const surveys = await firebaseSurveyManager.getUserSurveys(userId);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, surveys.length);
    return { success: true, surveys: surveys };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    return { success: false, error: error.message };
  }
};

// –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
export const testSubmitResponse = async (surveyId) => {
  try {
    const testResponse = {
      q1: 'opt1' // –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    };

    const result = await firebaseSurveyManager.submitResponse(
      surveyId, 
      '–¢–µ—Å—Ç–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫', 
      testResponse
    );
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', result.response);
    return { success: true, response: result.response };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error.message);
    return { success: false, error: error.message };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
export const checkAllCollections = async () => {
  try {
    const collections = ['surveys', 'responses', 'admins'];
    const results = {};

    for (const collectionName of collections) {
      const col = collection(db, collectionName);
      const snapshot = await getDocs(col);
      results[collectionName] = snapshot.size;
    }

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', results);
    return { success: true, collections: results };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error.message);
    return { success: false, error: error.message };
  }
};

// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–æ—Å–æ–≤
export const runFullSurveyTest = async () => {
  console.log('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–æ—Å–æ–≤...');
  
  try {
    // 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const connectionTest = await testFirebaseConnection();
    if (!connectionTest.success) {
      console.log('‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω');
      return connectionTest;
    }

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    const createTest = await createTestSurvey();
    if (!createTest.success) {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ');
      return createTest;
    }

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getUserSurveysTest = await testGetUserSurveys('test-admin');
    if (!getUserSurveysTest.success) {
      console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–∞–ª–µ–Ω–æ');
      return getUserSurveysTest;
    }

    // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const submitResponseTest = await testSubmitResponse(createTest.survey.id);
    if (!submitResponseTest.success) {
      console.log('‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞');
      return submitResponseTest;
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = await firebaseSurveyManager.getSurveyStats(createTest.survey.id);
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞:', stats);

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    return { 
      success: true, 
      survey: createTest.survey,
      response: submitResponseTest.response,
      stats: stats
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ç–µ—Å—Ç–µ:', error.message);
    return { success: false, error: error.message };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Firebase
export const getFirebaseStatus = () => {
  return {
    projectId: 'oprosnik-app',
    status: 'configured',
    message: 'Firebase –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.'
  };
}; 