import React, { useState } from 'react';
import firebaseSurveyManager from '../../utils/firebaseSurveyManager';
import firebaseAdminAuth from '../../utils/firebaseAdminAuth';
import './CreateSurvey.css';

const CreateSurvey = ({ isOpen, onClose, onSurveyCreated }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState([]);
  const [surveyData, setSurveyData] = useState({
    title: '',
    description: '',
    timeLimit: 0,
    questions: []
  });

  const questionTypes = [
    { id: 'single_choice', name: '–û–¥–∏–Ω –æ—Ç–≤–µ—Ç', icon: 'üîò', description: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞' },
    { id: 'multiple_choice', name: '–ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤', icon: '‚òëÔ∏è', description: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞' },
    { id: 'text', name: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç', icon: 'üìù', description: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç' },
    { id: 'rating', name: '–û—Ü–µ–Ω–∫–∞', icon: '‚≠ê', description: '–û—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10' }
  ];

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setSurveyData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleSurveyDataChange = (field, value) => {
    setSurveyData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const addQuestion = () => {
    const newQuestion = {
      id: `q_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      text: '',
      type: 'single_choice',
      required: true,
      hasCorrectAnswer: true,
      correctAnswer: null,
      points: 1,
      options: [
        { id: `opt_${Date.now()}_1`, text: '' },
        { id: `opt_${Date.now()}_2`, text: '' }
      ]
    };

    setSurveyData(prev => ({
      ...prev,
      questions: [...prev.questions, newQuestion]
    }));
  };

  const updateQuestion = (questionId, updates) => {
    setSurveyData(prev => ({
      ...prev,
      questions: prev.questions.map(q => 
        q.id === questionId ? { ...q, ...updates } : q
      )
    }));
  };

  const removeQuestion = (questionId) => {
    setSurveyData(prev => ({
      ...prev,
      questions: prev.questions.filter(q => q.id !== questionId)
    }));
  };

  const addOption = (questionId) => {
    setSurveyData(prev => ({
      ...prev,
      questions: prev.questions.map(q => {
        if (q.id === questionId) {
          const newOption = {
            id: `opt_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,
            text: ''
          };
          return {
            ...q,
            options: [...q.options, newOption]
          };
        }
        return q;
      })
    }));
  };

  const updateOption = (questionId, optionId, text) => {
    setSurveyData(prev => ({
      ...prev,
      questions: prev.questions.map(q => {
        if (q.id === questionId) {
          return {
            ...q,
            options: q.options.map(opt => 
              opt.id === optionId ? { ...opt, text } : opt
            )
          };
        }
        return q;
      })
    }));
  };

  const removeOption = (questionId, optionId) => {
    setSurveyData(prev => ({
      ...prev,
      questions: prev.questions.map(q => {
        if (q.id === questionId) {
          return {
            ...q,
            options: q.options.filter(opt => opt.id !== optionId)
          };
        }
        return q;
      })
    }));
  };

  const handleCorrectAnswerChange = (questionId, optionId, isChecked) => {
    setSurveyData(prev => ({
      ...prev,
      questions: prev.questions.map(q => {
        if (q.id === questionId) {
          let newCorrectAnswer;
          
          if (q.type === 'single_choice') {
            // –î–ª—è –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º
            newCorrectAnswer = isChecked ? optionId : null;
          } else {
            // –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
            const currentAnswers = Array.isArray(q.correctAnswer) ? q.correctAnswer : [];
            if (isChecked) {
              newCorrectAnswer = [...currentAnswers, optionId];
            } else {
              newCorrectAnswer = currentAnswers.filter(id => id !== optionId);
            }
          }
          
          return {
            ...q,
            correctAnswer: newCorrectAnswer
          };
        }
        return q;
      })
    }));
  };

  const validateStep = (step) => {
    const newErrors = [];

    if (step === 1) {
      if (!surveyData.title.trim()) {
        newErrors.push('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞');
      }
      if (!surveyData.description.trim()) {
        newErrors.push('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞');
      }
    } else if (step === 2) {
      if (surveyData.questions.length === 0) {
        newErrors.push('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å');
      } else {
        surveyData.questions.forEach((question, index) => {
          if (!question.text.trim()) {
            newErrors.push(`–í–æ–ø—Ä–æ—Å ${index + 1}: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞`);
          }
          if (question.type === 'single_choice' || question.type === 'multiple_choice') {
            if (question.options.length < 2) {
              newErrors.push(`–í–æ–ø—Ä–æ—Å ${index + 1}: –¥–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞`);
            }
            question.options.forEach((option, optIndex) => {
              if (!option.text.trim()) {
                newErrors.push(`–í–æ–ø—Ä–æ—Å ${index + 1}, –≤–∞—Ä–∏–∞–Ω—Ç ${optIndex + 1}: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞`);
              }
            });
          }
        });
      }
    }

    setErrors(newErrors);
    return newErrors.length === 0;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => prev + 1);
      setErrors([]);
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => prev - 1);
    setErrors([]);
  };

  const handleSubmit = async () => {
    if (!validateStep(currentStep)) {
      return;
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    if (isLoading) {
      return;
    }

    setIsLoading(true);
    setErrors([]);

    try {
      const currentAdmin = firebaseAdminAuth.getCurrentAdmin();
      if (!currentAdmin) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
      }

      console.log('–°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å...', surveyData);
      const result = await firebaseSurveyManager.createSurvey(surveyData, currentAdmin.id);
      
      console.log('–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', result);
      
      if (onSurveyCreated) {
        onSurveyCreated(result.survey);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞:', error);
      setErrors([error.message]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    if (!isLoading) {
      setCurrentStep(1);
      setSurveyData({
        title: '',
        description: '',
        timeLimit: 0,
        questions: []
      });
      setErrors([]);
      onClose();
    }
  };

  const renderQuestion = (question, index) => (
    <div key={question.id} className="question-card">
      <div className="question-header">
        <span className="question-number">–í–æ–ø—Ä–æ—Å {index + 1}</span>
        <button 
          className="remove-question-btn"
          onClick={() => removeQuestion(question.id)}
          type="button"
          title="–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
        >
          √ó
        </button>
      </div>

      <div className="question-content">
        <div className="question-text-section">
          <input
            type="text"
            className="question-text-input"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"
            value={question.text}
            onChange={(e) => updateQuestion(question.id, { text: e.target.value })}
          />
        </div>

        <div className="question-settings">
          <div className="setting-group">
            <label className="setting-label">
              –ë–∞–ª–ª—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
              <input
                type="number"
                min="1"
                max="10"
                value={question.points}
                onChange={(e) => updateQuestion(question.id, { points: parseInt(e.target.value) || 1 })}
                className="points-input"
              />
            </label>
          </div>
        </div>

        <div className="question-type-selector">
          <label>–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞:</label>
          <div className="type-options">
            {questionTypes.map(type => (
              <button
                key={type.id}
                type="button"
                className={`type-option ${question.type === type.id ? 'active' : ''}`}
                onClick={() => updateQuestion(question.id, { 
                  type: type.id,
                  correctAnswer: null,
                  hasCorrectAnswer: true,
                  required: true,
                  options: type.id === 'text' || type.id === 'rating' ? [] : question.options
                })}
              >
                <span className="type-icon">{type.icon}</span>
                <span className="type-name">{type.name}</span>
              </button>
            ))}
          </div>
        </div>

        {(question.type === 'single_choice' || question.type === 'multiple_choice') && (
          <div className="options-section">
            <div className="options-header">
              <label>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</label>
              <button 
                type="button"
                className="add-option-btn"
                onClick={() => addOption(question.id)}
              >
                + –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
              </button>
            </div>

            <div className="options-list">
              {question.options.map((option, optionIndex) => {
                const isCorrect = question.type === 'single_choice' 
                  ? question.correctAnswer === option.id
                  : Array.isArray(question.correctAnswer) && question.correctAnswer.includes(option.id);
                
                return (
                  <div key={option.id} className="option-item">
                    <div className="option-main">
                      <div className="option-checkbox-wrapper">
                        <input
                          type={question.type === 'multiple_choice' ? 'checkbox' : 'radio'}
                          name={`correct_${question.id}`}
                          id={`correct_${question.id}_${option.id}`}
                          checked={isCorrect}
                          onChange={(e) => handleCorrectAnswerChange(question.id, option.id, e.target.checked)}
                          className="correct-answer-checkbox"
                        />
                        <label 
                          htmlFor={`correct_${question.id}_${option.id}`}
                          className="checkbox-label-text"
                        >
                          –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π
                        </label>
                      </div>
                      
                      <input
                        type="text"
                        className="option-input"
                        placeholder={`–í–∞—Ä–∏–∞–Ω—Ç ${optionIndex + 1}`}
                        value={option.text}
                        onChange={(e) => updateOption(question.id, option.id, e.target.value)}
                      />
                    </div>
                    
                    <button
                      type="button"
                      className="remove-option-btn"
                      onClick={() => removeOption(question.id, option.id)}
                      disabled={question.options.length <= 2}
                      title="–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç"
                    >
                      √ó
                    </button>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {question.type === 'rating' && (
          <div className="rating-settings">
            <label>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:</label>
            <input
              type="number"
              min="3"
              max="10"
              value={question.maxRating || 5}
              onChange={(e) => updateQuestion(question.id, { maxRating: parseInt(e.target.value) || 5 })}
              className="rating-input"
            />
          </div>
        )}
      </div>
    </div>
  );

  if (!isOpen) return null;

  return (
    <div className="create-survey-overlay">
      <div className="create-survey-modal">
        <button className="create-survey-close" onClick={handleClose}>
          √ó
        </button>

        <div className="create-survey-content">
          <div className="survey-header">
            <h2>–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞</h2>
            <div className="step-indicator">
              <span className={`step ${currentStep >= 1 ? 'active' : ''}`}>1. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
              <span className={`step ${currentStep >= 2 ? 'active' : ''}`}>2. –í–æ–ø—Ä–æ—Å—ã</span>
              <span className={`step ${currentStep >= 3 ? 'active' : ''}`}>3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ</span>
            </div>
          </div>

          {errors.length > 0 && (
            <div className="error-messages">
              {errors.map((error, index) => (
                <div key={index} className="error-message">{error}</div>
              ))}
            </div>
          )}

          {currentStep === 1 && (
            <div className="step-content">
              <div className="form-group">
                <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ *</label>
                <input
                  type="text"
                  id="title"
                  name="title"
                  className="form-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"
                  value={surveyData.title}
                  onChange={handleInputChange}
                  maxLength="100"
                />
                <small className="form-hint">
                  –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
                </small>
              </div>

              <div className="form-group">
                <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:</label>
                <textarea
                  id="description"
                  className="form-textarea"
                  value={surveyData.description}
                  onChange={(e) => handleSurveyDataChange('description', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞..."
                  rows="3"
                  maxLength="200"
                />
                <small className="form-hint">
                  –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤
                </small>
              </div>

              <div className="form-group">
                <label htmlFor="timeLimit">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):</label>
                <div className="time-limit-container">
                  <input
                    type="number"
                    id="timeLimit"
                    className="form-input"
                    value={surveyData.timeLimit}
                    onChange={(e) => handleSurveyDataChange('timeLimit', parseInt(e.target.value) || 0)}
                    placeholder="0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
                    min="0"
                    max="1440"
                  />
                  <span className="time-limit-hint">
                    {surveyData.timeLimit > 0 
                      ? (surveyData.timeLimit >= 60
                        ? `(${Math.floor(surveyData.timeLimit / 60)}—á ${surveyData.timeLimit % 60}–º–∏–Ω)`
                        : `(${surveyData.timeLimit} –º–∏–Ω)`
                      )
                      : '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏'
                    }
                  </span>
                </div>
              </div>
            </div>
          )}

          {currentStep === 2 && (
            <div className="step-content">
              <div className="questions-header">
                <h3>–í–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞</h3>
                <button 
                  type="button"
                  className="add-question-btn"
                  onClick={addQuestion}
                >
                  + –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                </button>
              </div>

              <div className="questions-list">
                {surveyData.questions.length === 0 ? (
                  <div className="empty-questions">
                    <p>–í–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                    <p>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞</p>
                  </div>
                ) : (
                  surveyData.questions.map((question, index) => renderQuestion(question, index))
                )}
              </div>
            </div>
          )}

          {currentStep === 3 && (
            <div className="step-content">
              <div className="survey-preview">
                <h3>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
                <div className="preview-survey">
                  <h4>{surveyData.title}</h4>
                  {surveyData.description && <p>{surveyData.description}</p>}
                  
                  <div className="preview-questions">
                    {surveyData.questions.map((question, index) => (
                      <div key={question.id} className="preview-question">
                        <p><strong>{index + 1}. {question.text}</strong> {question.required && <span className="required">*</span>}</p>
                        {question.type === 'single_choice' && (
                          <div className="preview-options">
                            {question.options.map(option => (
                              <div key={option.id} className="preview-option">
                                <input type="radio" disabled />
                                <span>{option.text}</span>
                                {question.hasCorrectAnswer && question.correctAnswer === option.id && (
                                  <span className="correct-indicator">‚úì</span>
                                )}
                              </div>
                            ))}
                          </div>
                        )}
                        {question.type === 'multiple_choice' && (
                          <div className="preview-options">
                            {question.options.map(option => (
                              <div key={option.id} className="preview-option">
                                <input type="checkbox" disabled />
                                <span>{option.text}</span>
                                {question.hasCorrectAnswer && Array.isArray(question.correctAnswer) && question.correctAnswer.includes(option.id) && (
                                  <span className="correct-indicator">‚úì</span>
                                )}
                              </div>
                            ))}
                          </div>
                        )}
                        {question.type === 'text' && (
                          <div className="preview-text-input">
                            <input type="text" placeholder="–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç" disabled />
                          </div>
                        )}
                        {question.type === 'rating' && (
                          <div className="preview-rating">
                            {[...Array(question.maxRating || 5)].map((_, i) => (
                              <span key={i} className="star">‚≠ê</span>
                            ))}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          <div className="step-actions">
            {currentStep > 1 && (
              <button 
                type="button"
                className="btn btn-secondary"
                onClick={prevStep}
                disabled={isLoading}
              >
                –ù–∞–∑–∞–¥
              </button>
            )}
            
            {currentStep < 3 ? (
              <button 
                type="button"
                className="btn btn-primary"
                onClick={nextStep}
                disabled={isLoading}
              >
                –î–∞–ª–µ–µ
              </button>
            ) : (
              <button 
                type="button"
                className="btn btn-primary"
                onClick={handleSubmit}
                disabled={isLoading}
              >
                {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å'}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateSurvey; 